// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2019-09-13 16:00:06.173651 +0800 CST m=+0.047338509

package docs

import (
	"bytes"
	"encoding/json"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "用于接收alertmanager告警信息的webhook服务.",
        "title": "alertmanager-webhook服务",
        "contact": {
            "name": "王欣",
            "email": "wangxin_0611@126.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "{{.Host}}",
    "basePath": "/",
    "paths": {
        "/api/v1/node/disk/total/usage/": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "接收Alertmanager发送的告警信息.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Alertmanager"
                ],
                "summary": "PostWebhook",
                "parameters": [
                    {
                        "description": "Alertmanager发送的告警信息.",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/model.Notification"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/model.HandleResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/model.FailureResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.Alert": {
            "type": "object",
            "properties": {
                "annotations": {
                    "type": "object"
                },
                "endsAt": {
                    "type": "string"
                },
                "labels": {
                    "type": "object"
                },
                "startsAt": {
                    "type": "string"
                }
            }
        },
        "model.FailureResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "model.HandleResult": {
            "type": "object",
            "properties": {
                "result": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        },
        "model.Notification": {
            "type": "object",
            "properties": {
                "alerts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Alert"
                    }
                },
                "commonAnnotations": {
                    "type": "object"
                },
                "commonLabels": {
                    "type": "object"
                },
                "externalURL": {
                    "type": "string"
                },
                "groupKey": {
                    "type": "string"
                },
                "groupLabels": {
                    "type": "object"
                },
                "receiver": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{ Schemes: []string{}}

type s struct{}

func (s *s) ReadDoc() string {
	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface {}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, SwaggerInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
